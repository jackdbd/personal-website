const fs = require('fs');
const { v4: uuidv4 } = require('uuid');

const generateNonces = () => {
  const assets = ['INLINE_CSS', 'INLINE_JS', 'SW_REGISTRATION'];
  console.log('Generating nonces with UUID v4 for these assets', assets);
  const cb = (acc, cv) => Object.assign(acc, { [cv]: uuidv4() });
  return assets.reduce(cb, {});
};

const writeNetlifyToml = (noncesMap) => {
  const NETLIFY_TOML_PATH = 'netlify.toml';
  const cspDirectivesMap = {
    'script-src-elem': [noncesMap.INLINE_JS, noncesMap.SW_REGISTRATION],
    'style-src': [noncesMap.INLINE_CSS]
  };
  console.log(`Injecting nonces for CSP directives in ${NETLIFY_TOML_PATH}`);
  try {
    let data = fs.readFileSync(NETLIFY_TOML_PATH, 'utf8');
    Object.entries(cspDirectivesMap).forEach(([csp_directive, nonces]) => {
      console.log(
        `Injecting ${nonces.length} nonce/s for CSP directive ${csp_directive}`,
        nonces
      );
      const regex = new RegExp(`${csp_directive} .*'nonce-.*'`);
      let matches = regex.exec(data);
      const directiveOld = matches[0];

      let i = 0;
      let accumulator = '';
      let string = directiveOld;
      let idx = string.indexOf('nonce-');
      while (idx !== -1) {
        const pre = string.substring(0, idx);
        string = string.substring(idx + 1);
        if (i === 0) {
          accumulator = `${accumulator}${pre}nonce-${nonces[i]}'`;
        } else {
          accumulator = `${accumulator} 'nonce-${nonces[i]}'`;
        }
        idx = string.indexOf('nonce-');
        i++;
      }
      // console.log(`ACCUMULATOR`, accumulator);

      data = data.replace(directiveOld, accumulator);
      fs.writeFileSync(NETLIFY_TOML_PATH, data);
    });
  } catch (err) {
    console.error(err);
  }
};

const MESSAGE = 'THIS FILE WAS AUTOGENERATED - DO NOT MODIFY!\n';

const writeEleventyDataEnv = (noncesMap) => {
  const input = 'src/_data/env.template.js';
  const output = 'src/_data/env.js';
  console.log(`Generating ${output} from ${input} and injecting nonces`);

  let string = undefined;
  try {
    string = fs.readFileSync(input, 'utf8');
    Object.entries(noncesMap).forEach(([placeholder, nonce]) => {
      console.log(`${placeholder}`, nonce);
      string = string.replace(placeholder, nonce);
    });
  } catch (err) {
    console.error(err);
  }

  try {
    fs.writeFileSync(output, `// ${MESSAGE} ${string}`);
    console.log(`${output} written to disk`);
  } catch (err) {
    console.error(err);
  }
};

const m = generateNonces();
writeNetlifyToml(m);
writeEleventyDataEnv(m);
