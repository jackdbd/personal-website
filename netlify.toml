[build]
  command = "npm run build"
  functions = "src/functions"
  publish = "_site"

# ---------------------------------------------------------------------------- #
# Build plugins                                                                #
# ---------------------------------------------------------------------------- #

[[plugins]]
package = "netlify-plugin-a11y"
  [plugins.inputs]
  checkPaths = [
    '/',
    '/about/',
    '/blog/',
    '/contact/',
    '/projects/',
  ]

[[plugins]]
package = "netlify-plugin-debug-cache"

[[plugins]]
package = "netlify-plugin-html-validate"
  [plugins.inputs]
  ext = "html"
  config = ".htmlvalidate.json"

[[plugins]]
package = "netlify-plugin-is-website-vulnerable"

[context.production]
  command = "npm run build"

[context.deploy-preview]
  command = "npm run build"

# ---------------------------------------------------------------------------- #
# Cache headers                                                                #
# ---------------------------------------------------------------------------- #

# Most of the time, we do NOT want to set the cache-control header for a site
# hosted on Netlify. Here is why:
# https://www.netlify.com/blog/2017/02/23/better-living-through-caching/

# Be sure to never store the service worker in any cache (no-store), and clear
# any existing cache responses (max-age=0)
# As far as I understand, the sw.js file is invalidated in the HTTP cache every
# 24 hours, so no-store,max-age=0 is probably overkill. Since sw.js is a tiny
# file, I think it's better to err on the side of caution.
# https://chromium.googlesource.com/chromium/src/+/master/docs/security/service-worker-security-faq.md#do-service-workers-live-forever
[[headers]]
  for = "/sw.js"
  [headers.values]
    cache-control = "no-store,max-age=0"

# ---------------------------------------------------------------------------- #
# Security headers                                                             #
# ---------------------------------------------------------------------------- #

# Permissions-Policy is only partially supported in Chrome
# https://caniuse.com/?search=Permissions-Policy

# HSTS preload: READ THIS CAREFULLY!
# https://docs.netlify.com/domains-https/https-ssl/#hsts-preload
# https://hstspreload.org/#deployment-recommendations
# Check HSTS preload status here:
# https://hstspreload.org/

[[headers]]
  for = "*"
  [headers.values]
    NEL = '{"report_to":"default","max_age":31536000,"include_subdomains":true}'
    Permissions-Policy = "geolocation=(), microphone=()"
    Referrer-Policy = "no-referrer, strict-origin-when-cross-origin"
    Report-To = '''
    {
      "group": "default",
      "max_age": 31536000,
      "endpoints": [
        {"url": "https://giacomodebidda.report-uri.com/a/d/g"}
      ],
      "include_subdomains":true
    }
    '''
    Strict-Transport-Security = "max-age=63072000; includeSubDomains; preload"
    X-Content-Type-Options = "nosniff"
    X-XSS-Protection = "1; mode=block"

# ---------------------------------------------------------------------------- #
# Content-Security-Policy (it's a security header)                             #
# The CSP for this website is generated automatically at build time.           #
# ---------------------------------------------------------------------------- #

# The Content-Security-Policy header should only be sent for HTML resources, but
# if I use for = "*.html" Netlify does not seem to send it every time (should I
# redirect DOMAIN/blog to DOMAIN/blog/index.html ?)
# https://webhint.io/docs/user-guide/hints/hint-no-html-only-headers/

[[headers]]
  for = "*"
  [headers.values]
    Content-Security-Policy = "base-uri 'self'; child-src https://www.youtube.com/embed/ https://www.youtube-nocookie.com/ https://player.vimeo.com/video/; connect-src 'self' https://analytics.projects.giacomodebidda.com https://res.cloudinary.com; default-src 'self'; font-src 'self'; form-action 'self'; frame-ancestors 'none'; frame-src https://www.youtube.com/embed/ https://www.youtube-nocookie.com/ https://player.vimeo.com/video/; img-src 'self' https://res.cloudinary.com/jackdbd/image/upload/; manifest-src 'self'; media-src 'none'; object-src 'none'; prefetch-src 'self'; report-to default; report-uri https://giacomodebidda.report-uri.com; script-src 'unsafe-inline' 'self' 'sha256-PyAOqXgueeuk+8T8n00FvGNw7yCUcqcyD6E756FNmHo=' 'sha256-79P8AviabWxQGa1mlv2UcVqqDIAW0EHFiy7thd0Kza4=' 'sha256-GuPrCS6ENCSo+IUOOYkN+3dXas947C1GpqWIo24oWSc=' 'sha256-De+QVTzV8XQzxXulo8iB06ksKNitqK8PtbSJawnUDSo=' 'sha256-KEhjQMcGJHS4Ovb2P59Ue58GzrlVoSV7XJj1VvTbYdg=' 'sha256-kvWvKAySeAiwX8v6qUB6cn6yRLaCssbaSklkpq21AmE=' 'sha256-47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=' 'sha256-9YNk/uS/bXBVw7dHbEI5eY2MLGztFrN0/shogbc2+eI=' 'sha256-SvMTZsajFGVQX0edOXu1REFeA67Ia0SK92upNXpD72Q='; script-src-attr 'none'; script-src-elem 'self' 'sha256-PyAOqXgueeuk+8T8n00FvGNw7yCUcqcyD6E756FNmHo=' 'sha256-79P8AviabWxQGa1mlv2UcVqqDIAW0EHFiy7thd0Kza4=' 'sha256-GuPrCS6ENCSo+IUOOYkN+3dXas947C1GpqWIo24oWSc=' 'sha256-De+QVTzV8XQzxXulo8iB06ksKNitqK8PtbSJawnUDSo=' 'sha256-KEhjQMcGJHS4Ovb2P59Ue58GzrlVoSV7XJj1VvTbYdg=' 'sha256-kvWvKAySeAiwX8v6qUB6cn6yRLaCssbaSklkpq21AmE=' 'sha256-47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=' 'sha256-9YNk/uS/bXBVw7dHbEI5eY2MLGztFrN0/shogbc2+eI=' 'sha256-SvMTZsajFGVQX0edOXu1REFeA67Ia0SK92upNXpD72Q='; style-src 'self' 'unsafe-inline' 'self' 'sha256-qz5B6VOirK+Yv3zKYqgFLMMk2fSp9Nh2yZMF7NhIQT4=' 'sha256-3DOBxHy23tOjYX6Anl9n0OFUQ45OQu5FToeDrN+ApbE=' 'sha256-m5jc1lAmBceaceSbtgXbXZfkNzIR6MyGmTZ7Lkpofpc=' 'sha256-bLb6T4vhf3aPDAOpprJ0c0yzw+8lPaTztWO1ehx/wRo=' 'sha256-GYqogNdvJYq8rmCmKtZTJ3mwSJTQdvgiOkJjErRkos4=' 'sha256-LUf42m42mvci3HgGvGhIPJ/UjwjT3senEOm7htPwlBs=' 'sha256-4AJ9eSr08pnMQdAX2l3BUCEpCJPrHLaduzR5j1J+xHA=' 'sha256-g1cPNJoVAPuSICnZJfs6dbUSCkPiU42r5PFXJfPhH/Q=' 'sha256-LXWxNFYvuapRx1IXKS+CCyOxc5UtnT7h2oxYrrguB18=' 'sha256-T19TyhF4bRnspPjB0/clI2+a9IFm0qHzBRnhkFIy2Xo=' 'sha256-yD0sDopqUtFVHhHUKv9MCE4LbII92iYZCaKJn7eE7Uk=' 'sha256-+bNRuf8EyqSNF+zcTCvtfPack0O/KogYDWqJD1uWDRc='; style-src-attr 'self' 'unsafe-inline'; style-src-elem 'self' 'sha256-qz5B6VOirK+Yv3zKYqgFLMMk2fSp9Nh2yZMF7NhIQT4=' 'sha256-3DOBxHy23tOjYX6Anl9n0OFUQ45OQu5FToeDrN+ApbE=' 'sha256-m5jc1lAmBceaceSbtgXbXZfkNzIR6MyGmTZ7Lkpofpc=' 'sha256-bLb6T4vhf3aPDAOpprJ0c0yzw+8lPaTztWO1ehx/wRo=' 'sha256-GYqogNdvJYq8rmCmKtZTJ3mwSJTQdvgiOkJjErRkos4=' 'sha256-LUf42m42mvci3HgGvGhIPJ/UjwjT3senEOm7htPwlBs=' 'sha256-4AJ9eSr08pnMQdAX2l3BUCEpCJPrHLaduzR5j1J+xHA=' 'sha256-g1cPNJoVAPuSICnZJfs6dbUSCkPiU42r5PFXJfPhH/Q=' 'sha256-LXWxNFYvuapRx1IXKS+CCyOxc5UtnT7h2oxYrrguB18=' 'sha256-T19TyhF4bRnspPjB0/clI2+a9IFm0qHzBRnhkFIy2Xo=' 'sha256-yD0sDopqUtFVHhHUKv9MCE4LbII92iYZCaKJn7eE7Uk=' 'sha256-+bNRuf8EyqSNF+zcTCvtfPack0O/KogYDWqJD1uWDRc='; upgrade-insecure-requests; worker-src 'self'"

# ---------------------------------------------------------------------------- #
# Redirects                                                                    #
# ---------------------------------------------------------------------------- #

[[redirects]]
  from = "*"
  to = "/404"
  status = 404
